{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/justinlee/uTerm/frontend/src/app/api/proxy/route.js"],"sourcesContent":["// app/api/proxy/route.js\n\n// Author: Justin Lee\n// Description: API route for proxying command requests to the backend\n\nfunction formatTree(node, prefix = '', isLast = true) {\n  const lines = [];\n  if (!node || typeof node !== 'object' || !node.name) return lines;\n\n  const hasChildren = Array.isArray(node.contents) && node.contents.length > 0;\n  const connector = prefix + (prefix ? (isLast ? '└── ' : '├── ') : '');\n  lines.push(connector + node.name);\n\n  if (hasChildren) {\n    const newPrefix = prefix + (isLast ? '    ' : '│   ');\n    node.contents.forEach((child, i) => {\n      const isLastChild = i === node.contents.length - 1;\n      lines.push(...formatTree(child, newPrefix, isLastChild));\n    });\n  }\n\n  return lines;\n}\n\nexport async function POST(req) {\n    const { universeid, command } = await req.json();\n  \n    try {\n      const res = await fetch('https://backend-4na6.onrender.com/command/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-API-Key': process.env.BACKEND_API_KEY,\n        },\n        body: JSON.stringify({\n          universeid,\n          command,\n        }),\n      });\n  \n      const data = await res.json();\n\n      // Special handling for 'tree'\n    if (command.trim().startsWith('tree')) {\n      let formattedOutput;\n      try {\n        const treeJson = JSON.parse(data.message); // Parse the JSON structure\n        const treeLines = formatTree(treeJson);\n        formattedOutput = treeLines.join('\\n'); // Join into a formatted string\n      } catch (err) {\n        formattedOutput = `Error parsing tree structure: ${err.message}`;\n      }\n\n      return new Response(JSON.stringify({ message: formattedOutput }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    }\n  \n      return new Response(JSON.stringify(data), {\n        status: res.status,\n        headers: { 'Content-Type': 'application/json' },\n      });\n    } catch (err) {\n      return new Response(JSON.stringify({ error: err.message }), {\n        status: 500,\n      });\n    }\n  }"],"names":[],"mappings":"AAAA,yBAAyB;AAEzB,qBAAqB;AACrB,sEAAsE;;;;AAEtE,SAAS,WAAW,IAAI,EAAE,SAAS,EAAE,EAAE,SAAS,IAAI;IAClD,MAAM,QAAQ,EAAE;IAChB,IAAI,CAAC,QAAQ,OAAO,SAAS,YAAY,CAAC,KAAK,IAAI,EAAE,OAAO;IAE5D,MAAM,cAAc,MAAM,OAAO,CAAC,KAAK,QAAQ,KAAK,KAAK,QAAQ,CAAC,MAAM,GAAG;IAC3E,MAAM,YAAY,SAAS,CAAC,SAAU,SAAS,SAAS,SAAU,EAAE;IACpE,MAAM,IAAI,CAAC,YAAY,KAAK,IAAI;IAEhC,IAAI,aAAa;QACf,MAAM,YAAY,SAAS,CAAC,SAAS,SAAS,MAAM;QACpD,KAAK,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO;YAC5B,MAAM,cAAc,MAAM,KAAK,QAAQ,CAAC,MAAM,GAAG;YACjD,MAAM,IAAI,IAAI,WAAW,OAAO,WAAW;QAC7C;IACF;IAEA,OAAO;AACT;AAEO,eAAe,KAAK,GAAG;IAC1B,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,IAAI;IAE9C,IAAI;QACF,MAAM,MAAM,MAAM,MAAM,8CAA8C;YACpE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,aAAa,QAAQ,GAAG,CAAC,eAAe;YAC1C;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA;YACF;QACF;QAEA,MAAM,OAAO,MAAM,IAAI,IAAI;QAE3B,8BAA8B;QAChC,IAAI,QAAQ,IAAI,GAAG,UAAU,CAAC,SAAS;YACrC,IAAI;YACJ,IAAI;gBACF,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,OAAO,GAAG,2BAA2B;gBACtE,MAAM,YAAY,WAAW;gBAC7B,kBAAkB,UAAU,IAAI,CAAC,OAAO,+BAA+B;YACzE,EAAE,OAAO,KAAK;gBACZ,kBAAkB,CAAC,8BAA8B,EAAE,IAAI,OAAO,EAAE;YAClE;YAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAgB,IAAI;gBAChE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,OAAO;YACxC,QAAQ,IAAI,MAAM;YAClB,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAK;QACZ,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,IAAI,OAAO;QAAC,IAAI;YAC1D,QAAQ;QACV;IACF;AACF","debugId":null}}]
}